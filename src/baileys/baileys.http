### WhatsApp API Testing Guide
# This file contains all endpoints to interact with your WhatsApp API service
# The authentication flow is:
# 1. Create connection -> 2. Get pairing code -> 3. Enter code on device -> 4. Connection established

# Then select the environment using the REST Client plugin's environment selector
# (by default in the bottom right of VS Code when viewing a .http file)

@sessionId = user2
@clientId = your-client-id-here
@timestamp = {{$timestamp}}

### ====== CONNECTION MANAGEMENT ======

### 1. Create a new WhatsApp connection
# First step: create a session with your phone number
POST {{baseUrl}}/whatsapp/sessions/{{sessionId}}
Content-Type: application/json

{
  "phoneNumber": "{{phoneNumber}}"
}

### 2. Get pairing code for a session
# After creating a connection, get the pairing code to enter on your device
GET {{baseUrl}}/whatsapp/sessions/{{sessionId}}/pairing-code

### 3. Check connection status (call repeatedly after pairing)
# After entering the pairing code on your device, check this endpoint
# until the status changes to "connected"
GET {{baseUrl}}/whatsapp/sessions/{{sessionId}}/status

### 4. Get all active sessions
# Useful to see all currently active WhatsApp connections
GET {{baseUrl}}/whatsapp/sessions

### 6. Close a connection
# Use this to properly log out and close a WhatsApp connection
DELETE {{baseUrl}}/whatsapp/sessions/{{sessionId}}


### 8. Get all groups for a client
# Retrieve all WhatsApp groups the connected account is part of
GET {{baseUrl}}/whatsapp/groups?clientId={{clientId}}

### 9. Get all archived groups for a client
# Retrieve all archived WhatsApp groups for the connected account
GET {{baseUrl}}/whatsapp/groups/archived?clientId={{clientId}}

### 10. Delete all messages from all archived groups
# Delete all messages from every archived group
DELETE {{baseUrl}}/whatsapp/delete/archive/all?clientId={{clientId}}

### 11. Delete messages from specific groups
# Delete all messages from specified group IDs
DELETE {{baseUrl}}/whatsapp/delete/group
Content-Type: application/json

{
  "clientId": "{{clientId}}",
  "groupIds": [
    "120363123456789012@g.us",
    "120363987654321098@g.us"
  ]
}

### 12. Send message to specific groups
# Send a message to multiple groups at once
POST {{baseUrl}}/whatsapp/send/group
Content-Type: application/json

{
  "clientId": "{{clientId}}",
  "groupIds": [
    "120363123456789012@g.us",
    "120363987654321098@g.us"
  ],
  "message": "Hello everyone! This is a group message sent at {{$datetime iso8601}}"
}

### ====== MESSAGING ======

### 13. Send a text message
# Basic text message - simplest form of message
POST {{baseUrl}}/whatsapp/sessions/{{sessionId}}/messages
Content-Type: application/json

{
  "to": "972542370954",
  "content": "Hello from WhatsApp Cluster! Current time: {{$datetime iso8601}}",
  "type": "text"
}

### 14. Send a text message to yourself
# Send a message to the same number used for the connection
POST {{baseUrl}}/whatsapp/sessions/{{sessionId}}/messages
Content-Type: application/json

{
  "to": "{{phoneNumber}}",
  "content": "This is a test message to myself! Timestamp: {{$timestamp}}",
  "type": "text"
}

### 15. Send an image message
# Image message with caption
POST {{baseUrl}}/whatsapp/sessions/{{sessionId}}/messages
Content-Type: application/json

{
  "to": "{{phoneNumber}}",
  "content": {
    "url": "https://picsum.photos/800/600",
    "caption": "Random image from Lorem Picsum!"
  },
  "type": "image"
}

### 16. Send a document message
# PDF document with custom filename
POST {{baseUrl}}/whatsapp/sessions/{{sessionId}}/messages
Content-Type: application/json

{
  "to": "{{phoneNumber}}",
  "content": {
    "url": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
    "fileName": "Sample Document.pdf",
    "mimetype": "application/pdf"
  },
  "type": "document"
}

### 17. Send a location message
# Coordinates with a location name
POST {{baseUrl}}/whatsapp/sessions/{{sessionId}}/messages
Content-Type: application/json

{
  "to": "{{phoneNumber}}",
  "content": {
    "degreesLatitude": 32.0853,
    "degreesLongitude": 34.7818,
    "name": "Tel Aviv, Israel"
  },
  "type": "location"
}

### ====== BULK MESSAGING ======

### 18. Send bulk text messages
# Send the same message to multiple recipients
POST {{baseUrl}}/whatsapp/sessions/{{sessionId}}/bulk-messages
Content-Type: application/json

{
  "recipients": ["{{phoneNumber}}", "972542370954"],
  "content": "This is a bulk message test. Time: {{$datetime 'YYYY-MM-DD HH:mm:ss'}}",
  "type": "text"
}

### 19. Send bulk image messages
POST {{baseUrl}}/whatsapp/sessions/{{sessionId}}/bulk-messages
Content-Type: application/json

{
  "recipients": ["{{phoneNumber}}"],
  "content": {
    "url": "https://picsum.photos/1024/768",
    "caption": "Bulk image message test!"
  },
  "type": "image"
}

### ====== SESSION MANAGEMENT ======

### 20. Create a new WhatsApp connection with custom session name
# Create a different session for another phone number or account
@customSession = business_account
POST {{baseUrl}}/whatsapp/sessions/{{customSession}}
Content-Type: application/json

{
  "phoneNumber": "+972501234567"
}

### ====== TESTING WORKFLOW FOR PRD ENDPOINTS ======

### Step 1: Connect and get clientId
# Use either the session-based connection or the PRD connect endpoint
# The response should include a clientId that you'll use for subsequent requests

### Step 2: Test group retrieval
# First get all groups to see what groups are available
GET {{baseUrl}}/whatsapp/groups?clientId=your-actual-client-id

### Step 3: Test archived groups
# Check if there are any archived groups
GET {{baseUrl}}/whatsapp/groups/archived?clientId=your-actual-client-id

### Step 4: Test group messaging
# Send a test message to a specific group (replace with actual group ID)
POST {{baseUrl}}/whatsapp/send/group
Content-Type: application/json

{
  "clientId": "your-actual-client-id",
  "groupIds": ["actual-group-id@g.us"],
  "message": "Test message from API"
}

### Step 5: Test message deletion (USE WITH CAUTION!)
# Delete messages from specific groups - THIS CANNOT BE UNDONE
DELETE {{baseUrl}}/whatsapp/delete/group
Content-Type: application/json

{
  "clientId": "your-actual-client-id",
  "groupIds": ["test-group-id@g.us"]
}

### TROUBLESHOOTING TIPS:
# 1. If connection shows "pairing" but doesn't connect after entering code:
#    - Try closing and recreating the session
#    - Check your phone's internet connection
#    - Make sure WhatsApp is open on your phone when entering the code
# 
# 2. If you get a "Session not found" error:
#    - The session might have disconnected or expired
#    - Create a new session with the phone number
#
# 3. If messages aren't being delivered:
#    - Verify the connection status is "connected"
#    - Check that the recipient number is correctly formatted
#
# 4. For PRD endpoints:
#    - Make sure to use the correct clientId from the connection response
#    - Group IDs should be in the format: "123456789@g.us"
#    - Be careful with delete operations - they cannot be undone
#
# 5. Group ID format:
#    - Individual chats: "1234567890@s.whatsapp.net"
#    - Group chats: "1234567890-1234567890@g.us"

### IMPORTANT NOTES FOR PRD ENDPOINTS:
# - The clientId is returned when you create a connection
# - Group IDs can be obtained from the /groups endpoint
# - Message deletion is permanent and cannot be undone
# - Always test with non-important groups first
# - Some operations may take time for large groups

### Session created on: 2025-05-30 11:34:02
### Current User: zushar
### Updated: {{$datetime 'YYYY-MM-DD HH:mm:ss'}} with PRD endpoints
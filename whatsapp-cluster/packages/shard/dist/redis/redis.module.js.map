{"version":3,"sources":["../../src/redis/redis.module.ts"],"sourcesContent":["// src/redis/redis.module.ts\nimport { Global, Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Redis from 'ioredis';\n\n// Define injection token\nexport const REDIS_CLIENT = 'REDIS_CLIENT';\n\n// Optional: makes the module's providers available globally\n@Global()\n@Module({\n  providers: [\n    {\n      provide: REDIS_CLIENT, // the token to be defined\n      useFactory: (configService: ConfigService): Redis => {\n        return new Redis({\n          host: configService.get<string>('REDIS_HOST', 'localhost'),\n          port: configService.get<number>('REDIS_PORT', 6379),\n          // password: configService.get<string>('REDIS_PASSWORD'), // Uncomment if password is provided\n          // db: configService.get<number>('REDIS_DB', 0), // Uncomment if a specific DB is desired\n        });\n      },\n      inject: [ConfigService], // Inject ConfigService into useFactory\n    },\n  ],\n  exports: [REDIS_CLIENT], // Export the token for injection in other modules\n})\nexport class RedisModule {}\n"],"names":["REDIS_CLIENT","RedisModule","providers","provide","useFactory","configService","Redis","host","get","port","inject","ConfigService","exports"],"mappings":"AAAA,4BAA4B;;;;;;;;;;;;IAMfA,YAAY;eAAZA;;IAqBAC,WAAW;eAAXA;;;wBA1BkB;wBACD;gEACZ;;;;;;;;;;;;AAGX,MAAMD,eAAe;AAqBrB,IAAA,AAAMC,cAAN,MAAMA;AAAa;;;;QAhBxBC,WAAW;YACT;gBACEC,SAASH;gBACTI,YAAY,CAACC;oBACX,OAAO,IAAIC,gBAAK,CAAC;wBACfC,MAAMF,cAAcG,GAAG,CAAS,cAAc;wBAC9CC,MAAMJ,cAAcG,GAAG,CAAS,cAAc;oBAGhD;gBACF;gBACAE,QAAQ;oBAACC,qBAAa;iBAAC;YACzB;SACD;QACDC,SAAS;YAACZ;SAAa"}
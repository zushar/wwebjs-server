{"version":3,"sources":["../../src/wwebjs/wwebjs.services.ts"],"sourcesContent":["// wwebjs.services.ts\nimport {\n  ForbiddenException,\n  Inject,\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n} from '@nestjs/common';\nimport Redis from 'ioredis';\nimport { REDIS_CLIENT } from 'src/redis/redis.module';\nimport { Chat, Client } from 'whatsapp-web.js';\nimport { ConnectService } from './connect.service';\n\n@Injectable()\nexport class WwebjsServices {\n  private readonly logger = new Logger(WwebjsServices.name);\n\n  constructor(\n    @Inject(REDIS_CLIENT) private readonly redisClient: Redis,\n    private readonly connectService: ConnectService,\n  ) {}\n\n  /**\n   * Retrieves a verified client from memory or Redis.\n   * If the client is not verified, it throws a ForbiddenException.\n   * If the client is not found in memory, it attempts to restore it from Redis.\n   */\n  private async getVerifiedClient(clientId: string): Promise<Client> {\n    let clientState:\n      | { client: Client; ready: boolean; verified: boolean }\n      | undefined = undefined;\n\n    try {\n      clientState = this.connectService.getClient(clientId);\n    } catch (e) {\n      this.logger.warn(\n        `Client ${clientId} not found in memory. Attempting to restore from Redis...`,\n      );\n    }\n\n    if (!clientState) {\n      // Not in memory, try to restore from Redis\n      const isVerified = await this.connectService.isClientVerified(clientId);\n      if (!isVerified) {\n        const errorMsg = `Client for clientId ${clientId} is not verified in Redis. Please complete the pairing process.`;\n        this.logger.error(errorMsg);\n        throw new ForbiddenException(errorMsg);\n      }\n      this.logger.log(`Re-initializing client ${clientId} from Redis...`);\n      const redisClientMeta = await this.connectService.getClientMeta(clientId);\n      if (!redisClientMeta) {\n        const errorMsg = `Client ${clientId} not found in Redis.`;\n        this.logger.error(errorMsg);\n        throw new ForbiddenException(errorMsg);\n      }\n      // Re-initialize the client (this should add it to memory)\n      await this.connectService.createVerificationCode(\n        clientId,\n        redisClientMeta.type,\n        redisClientMeta.verified,\n      );\n      // Wait for the client to be ready in memory\n      let retries = 10;\n      while (retries-- > 0) {\n        try {\n          clientState = this.connectService.getClient(clientId);\n          if (clientState && clientState.ready && clientState.verified) {\n            break;\n          }\n        } catch (e) {\n          // Not ready yet\n        }\n        await new Promise((res) => setTimeout(res, 1000)); // Wait 1 second\n      }\n      if (!clientState || !clientState.ready || !clientState.verified) {\n        const errorMsg = `Failed to re-initialize client for clientId ${clientId} from Redis.`;\n        this.logger.error(errorMsg);\n        throw new ForbiddenException(errorMsg);\n      }\n    } else {\n      // If in memory, check verification\n      if (!clientState.verified) {\n        const errorMsg = `Client for clientId ${clientId} has not completed the verification step.`;\n        this.logger.error(errorMsg);\n        throw new ForbiddenException(errorMsg);\n      }\n    }\n\n    return clientState.client;\n  }\n\n  /**\n   * Sends a message using the specified WhatsApp client.\n   */\n  async sendMessage(\n    clientId: string,\n    recipient: string,\n    message: string,\n  ): Promise<unknown> {\n    this.logger.log(\n      `Attempting to send message from ${clientId} to ${recipient}`,\n    );\n    const client = await this.getVerifiedClient(clientId);\n    const formattedRecipient = recipient.includes('@')\n      ? recipient\n      : `${recipient}@c.us`;\n    try {\n      const msgResult = await client.sendMessage(formattedRecipient, message);\n      this.logger.log(\n        `Message sent successfully from ${clientId} to ${formattedRecipient}`,\n      );\n      return msgResult;\n    } catch (error) {\n      this.logger.error(\n        `Error sending message from ${clientId} to ${formattedRecipient}:`,\n        error,\n      );\n      throw new InternalServerErrorException(\n        `Failed to send message: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n\n  /**\n   * Gets all group chats for the specified client.\n   */\n  async getAllGroups(\n    clientId: string,\n  ): Promise<{ groups: { id: string; name: string }[] }> {\n    this.logger.log(`Fetching all groups for clientId: ${clientId}`);\n    const client = await this.getVerifiedClient(clientId);\n\n    try {\n      const allChats = await client.getChats();\n      const groups = allChats\n        .filter((chat: Chat) => chat.isGroup)\n        .map((chat: Chat) => ({\n          id: chat.id._serialized,\n          name: chat.name,\n        }));\n      this.logger.log(\n        `Found ${groups.length} groups for clientId: ${clientId}`,\n      );\n      return { groups };\n    } catch (error) {\n      this.logger.error(`Error fetching groups for ${clientId}:`, error);\n      throw new InternalServerErrorException(\n        `Failed to fetch groups: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n\n  /**\n   * Gets all archived group chats for the specified client.\n   */\n  async getAllGroupsInArchive(\n    clientId: string,\n  ): Promise<{ archivedGroups: { id: string; name: string }[] }> {\n    this.logger.log(`Fetching archived groups for clientId: ${clientId}`);\n    const client = await this.getVerifiedClient(clientId);\n\n    try {\n      const allChats = await client.getChats();\n      const archivedGroups = allChats\n        .filter((chat: Chat) => chat.isGroup && chat.archived)\n        .map((chat: Chat) => ({\n          id: chat.id._serialized,\n          name: chat.name,\n        }));\n      this.logger.log(\n        `Found ${archivedGroups.length} archived groups for clientId: ${clientId}`,\n      );\n      return { archivedGroups };\n    } catch (error) {\n      this.logger.error(\n        `Error fetching archived groups for ${clientId}:`,\n        error,\n      );\n      throw new InternalServerErrorException(\n        `Failed to fetch archived groups: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n\n  /**\n   * Deletes all messages from all archived groups.\n   */\n  async deleteAllMessagesFromArchivedGroups(\n    clientId: string,\n  ): Promise<{ deletedFromGroups: string[] }> {\n    this.logger.log(\n      `Deleting all messages from archived groups for clientId: ${clientId}`,\n    );\n    const client = await this.getVerifiedClient(clientId);\n\n    try {\n      const allChats = await client.getChats();\n      const archivedGroups = allChats.filter(\n        (chat: Chat) => chat.isGroup && chat.archived,\n      );\n      const deletedFromGroups: string[] = [];\n\n      for (const group of archivedGroups) {\n        try {\n          await group.clearMessages();\n          deletedFromGroups.push(group.id._serialized);\n          this.logger.log(\n            `Cleared messages from archived group ${group.id._serialized}`,\n          );\n        } catch (err) {\n          this.logger.error(\n            `Failed to clear messages from archived group ${group.id._serialized}:`,\n            err,\n          );\n        }\n      }\n\n      return { deletedFromGroups };\n    } catch (error) {\n      this.logger.error(\n        `Error deleting messages from archived groups for ${clientId}:`,\n        error,\n      );\n      throw new InternalServerErrorException(\n        `Failed to delete messages from archived groups: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n\n  /**\n   * Deletes all messages from specific groups.\n   */\n  async deleteMessagesFromGroups(\n    clientId: string,\n    groupIds: string[],\n  ): Promise<{ deletedFromGroups: string[]; invalidGroupIds: string[] }> {\n    this.logger.log(\n      `Deleting messages from specific groups for clientId: ${clientId}`,\n    );\n    const client = await this.getVerifiedClient(clientId);\n\n    const deletedFromGroups: string[] = [];\n    const invalidGroupIds: string[] = [];\n\n    for (const groupId of groupIds) {\n      try {\n        const chat = await client.getChatById(groupId);\n        if (!chat || !chat.isGroup) {\n          this.logger.warn(\n            `Group ID ${groupId} is invalid or not a group for clientId: ${clientId}`,\n          );\n          invalidGroupIds.push(groupId);\n          continue;\n        }\n        await chat.clearMessages();\n        deletedFromGroups.push(groupId);\n        this.logger.log(\n          `Cleared messages from group ${groupId} for clientId: ${clientId}`,\n        );\n      } catch (error) {\n        this.logger.error(\n          `Error clearing messages from group ${groupId} for clientId: ${clientId}:`,\n          error,\n        );\n        invalidGroupIds.push(groupId);\n      }\n    }\n\n    return { deletedFromGroups, invalidGroupIds };\n  }\n\n  /**\n   * Sends a message to specific groups.\n   */\n  async sendMessageToGroups(\n    clientId: string,\n    groupIds: string[],\n    message: string,\n  ): Promise<{ sentToGroups: string[]; invalidGroupIds: string[] }> {\n    this.logger.log(\n      `Sending message to specific groups for clientId: ${clientId}`,\n    );\n    const client = await this.getVerifiedClient(clientId);\n\n    const sentToGroups: string[] = [];\n    const invalidGroupIds: string[] = [];\n\n    for (const groupId of groupIds) {\n      try {\n        const chat = await client.getChatById(groupId);\n        if (!chat || !chat.isGroup) {\n          this.logger.warn(\n            `Group ID ${groupId} is invalid or not a group for clientId: ${clientId}`,\n          );\n          invalidGroupIds.push(groupId);\n          continue;\n        }\n        await client.sendMessage(groupId, message);\n        sentToGroups.push(groupId);\n        this.logger.log(\n          `Sent message to group ${groupId} for clientId: ${clientId}`,\n        );\n      } catch (error) {\n        this.logger.error(\n          `Error sending message to group ${groupId} for clientId: ${clientId}:`,\n          error,\n        );\n        invalidGroupIds.push(groupId);\n      }\n    }\n\n    return { sentToGroups, invalidGroupIds };\n  }\n}\n"],"names":["WwebjsServices","getVerifiedClient","clientId","clientState","undefined","connectService","getClient","e","logger","warn","isVerified","isClientVerified","errorMsg","error","ForbiddenException","log","redisClientMeta","getClientMeta","createVerificationCode","type","verified","retries","ready","Promise","res","setTimeout","client","sendMessage","recipient","message","formattedRecipient","includes","msgResult","InternalServerErrorException","Error","String","getAllGroups","allChats","getChats","groups","filter","chat","isGroup","map","id","_serialized","name","length","getAllGroupsInArchive","archivedGroups","archived","deleteAllMessagesFromArchivedGroups","deletedFromGroups","group","clearMessages","push","err","deleteMessagesFromGroups","groupIds","invalidGroupIds","groupId","getChatById","sendMessageToGroups","sentToGroups","constructor","redisClient","Logger"],"mappings":"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"}
{"version":3,"sources":["../../src/wwebjs/whatsapp-test.controller.ts"],"sourcesContent":["// whatsapp-test.controller.ts\nimport {\n  Body,\n  Controller,\n  Get,\n  Logger,\n  Post,\n  Delete,\n  BadRequestException,\n  Query,\n} from '@nestjs/common';\nimport { ClientType } from 'src/wwebjs/client-meta.type';\nimport { ConnectService } from './connect.service';\nimport { WwebjsServices } from './wwebjs.services';\n\n// DTOs\nclass CreateConnectionDto {\n  phoneNumber: string;\n  clientType: ClientType;\n}\n\nclass VerifyCodeDto {\n  clientId: string;\n  code?: string;\n}\n\nclass SendMessageDto {\n  clientId: string;\n  recipient: string;\n  message: string;\n}\n\nclass GetGroupsDto {\n  clientId: string;\n}\n\nclass SendMessageToGroupsDto {\n  clientId: string;\n  groupIds: string[];\n  message: string;\n}\n\nclass DeleteGroupsDto {\n  clientId: string;\n  groupIds: string[];\n}\n\n@Controller('api/whatsapp-test')\nexport class WhatsAppTestController {\n  private readonly logger = new Logger(WhatsAppTestController.name);\n\n  constructor(\n    private readonly wwebjsServices: WwebjsServices,\n    private readonly connectService: ConnectService,\n  ) {}\n\n  @Get('test')\n  test(): string {\n    this.logger.log('Test endpoint hit');\n    return 'Test endpoint is working';\n  }\n\n  @Post('create-code')\n  async createVerificationCode(\n    @Body() dto: CreateConnectionDto,\n  ): Promise<{ clientId: string; pairingCode?: string }> {\n    this.logger.log(\n      `Creating verification code for phoneNumber: ${dto.phoneNumber}`,\n    );\n    if (\n      !dto.clientType ||\n      (dto.clientType !== 'delete-only' && dto.clientType !== 'full')\n    ) {\n      this.logger.error('Client type is required');\n      throw new BadRequestException('Client type is required');\n    }\n    if (!dto.phoneNumber) {\n      this.logger.error('Phone number is required');\n      throw new BadRequestException('Phone number is required');\n    }\n    return await this.connectService.createVerificationCode(\n      dto.phoneNumber,\n      dto.clientType,\n    );\n  }\n\n  @Post('verify-code')\n  async verifyCode(@Body() dto: VerifyCodeDto): Promise<{ message: string }> {\n    this.logger.log(`Verifying code for clientId: ${dto.clientId}`);\n    if (!dto.clientId) {\n      this.logger.error('clientId is required');\n      throw new BadRequestException('clientId is required');\n    }\n    return await this.connectService.verifyCode(dto.clientId);\n  }\n\n  @Post('send-message')\n  async sendMessage(@Body() dto: SendMessageDto): Promise<unknown> {\n    this.logger.log(\n      `Sending message from clientId: ${dto.clientId} to recipient: ${dto.recipient}`,\n    );\n    if (!dto.clientId || !dto.recipient || !dto.message) {\n      this.logger.error('clientId, recipient, and message are required');\n      throw new BadRequestException(\n        'clientId, recipient, and message are required',\n      );\n    }\n    return await this.wwebjsServices.sendMessage(\n      dto.clientId,\n      dto.recipient,\n      dto.message,\n    );\n  }\n\n  @Get('groups')\n  async getGroups(\n    @Query() query: GetGroupsDto,\n  ): Promise<{ groups: { id: string; name: string }[] }> {\n    this.logger.log(`Getting groups for clientId: ${query.clientId}`);\n    if (!query.clientId) {\n      this.logger.error('clientId is required');\n      throw new BadRequestException('clientId is required');\n    }\n    return await this.wwebjsServices.getAllGroups(query.clientId);\n  }\n\n  @Get('groups/archived')\n  async getArchivedGroups(\n    @Query() query: GetGroupsDto,\n  ): Promise<{ archivedGroups: { id: string; name: string }[] }> {\n    this.logger.log(`Getting archived groups for clientId: ${query.clientId}`);\n    if (!query.clientId) {\n      this.logger.error('clientId is required');\n      throw new BadRequestException('clientId is required');\n    }\n    return await this.wwebjsServices.getAllGroupsInArchive(query.clientId);\n  }\n\n  @Delete('delete/archive/all')\n  async deleteAllMessagesFromArchivedGroups(\n    @Query() query: GetGroupsDto,\n  ): Promise<{ deletedFromGroups: string[] }> {\n    this.logger.log(\n      `Deleting all messages from archived groups for clientId: ${query.clientId}`,\n    );\n    if (!query.clientId) {\n      this.logger.error('clientId is required');\n      throw new BadRequestException('clientId is required');\n    }\n    return await this.wwebjsServices.deleteAllMessagesFromArchivedGroups(\n      query.clientId,\n    );\n  }\n\n  @Delete('delete/group')\n  async deleteMessagesFromGroups(\n    @Body() dto: DeleteGroupsDto,\n  ): Promise<{ deletedFromGroups: string[]; invalidGroupIds: string[] }> {\n    this.logger.log(\n      `Deleting messages from groups for clientId: ${dto.clientId}, groupIds: ${dto.groupIds}`,\n    );\n    if (!dto.clientId || !dto.groupIds || !Array.isArray(dto.groupIds)) {\n      this.logger.error('clientId and groupIds are required');\n      throw new BadRequestException('clientId and groupIds are required');\n    }\n    return await this.wwebjsServices.deleteMessagesFromGroups(\n      dto.clientId,\n      dto.groupIds,\n    );\n  }\n\n  @Post('send/group')\n  async sendMessageToGroups(\n    @Body() dto: SendMessageToGroupsDto,\n  ): Promise<{ sentToGroups: string[]; invalidGroupIds: string[] }> {\n    this.logger.log(\n      `Sending message to groups for clientId: ${dto.clientId}, groupIds: ${dto.groupIds}`,\n    );\n    if (!dto.clientId || !dto.groupIds || !dto.message) {\n      this.logger.error('clientId, groupIds, and message are required');\n      throw new BadRequestException(\n        'clientId, groupIds, and message are required',\n      );\n    }\n    return await this.wwebjsServices.sendMessageToGroups(\n      dto.clientId,\n      dto.groupIds,\n      dto.message,\n    );\n  }\n}\n"],"names":["WhatsAppTestController","CreateConnectionDto","VerifyCodeDto","SendMessageDto","GetGroupsDto","SendMessageToGroupsDto","DeleteGroupsDto","test","logger","log","createVerificationCode","dto","phoneNumber","clientType","error","BadRequestException","connectService","verifyCode","clientId","sendMessage","recipient","message","wwebjsServices","getGroups","query","getAllGroups","getArchivedGroups","getAllGroupsInArchive","deleteAllMessagesFromArchivedGroups","deleteMessagesFromGroups","groupIds","Array","isArray","sendMessageToGroups","constructor","Logger","name"],"mappings":"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"}
services:
  redis:
    image: redis:latest
    container_name: redis-wwebjs
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - internal-net

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatsapp-cluster
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whatsapp-cluster.rule=Host(`api.elhanan.org`)"
      - "traefik.http.routers.whatsapp-cluster.entrypoints=websecure"
      - "traefik.http.routers.whatsapp-cluster.tls.certresolver=myresolver"
      - "traefik.http.services.whatsapp-cluster.loadbalancer.server.port=3000"
    ports:
      - "3000"
    depends_on:
      - redis
      - postgres
      - mongo
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=whatsapp
      - MONGO_URI=mongodb://root:example@mongo-db:27017/whatsapp?authSource=admin
    restart: always
    volumes:
      - ./sessions:/usr/src/app/sessions
      - ./session_logs:/usr/src/app/session_logs
    networks:
      - internal-net

  postgres:
    image: postgres:latest
    container_name: postgres-db
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=whatsapp
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - internal-net

  reverse-proxy:
    image: traefik:v3.4
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=elhanan@elhanan.org"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - letsencrypt:/letsencrypt
    networks:
      - internal-net
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - internal-net

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    pid: "host"                            # so it can see host metrics
    restart: always
    networks:
      - internal-net

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@postgres-db:5432/whatsapp?sslmode=disable
    restart: always
    networks:
      - internal-net
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    command: --redis.addr=redis:6379  
    restart: always
    networks:
      - internal-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.elhanan.org`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=myresolver"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=YourAdminPassword
      - GF_SERVER_ROOT_URL=https://grafana.elhanan.org
      - GF_SERVER_ENABLE_TRUSTED_PROXIES=0.0.0.0/0
      - GF_COOKIE_SECURE=true
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - internal-net
  mongo:
    image: mongo:latest
    container_name: mongo-db
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    volumes:
      - ./mongo_data:/data/db
    networks:
      - internal-net
  mongo-express:
    image: mongo-express:1.0
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo-db:27017/
      ME_CONFIG_BASICAUTH: false
    networks:
      - internal-net
  mongodb-exporter:
    image: bitnami/mongodb-exporter:latest
    container_name: mongodb-exporter
    depends_on:
      - mongo
    environment:
      - MONGODB_URI=mongodb://root:example@mongo-db:27017
    ports:
      - "9216:9216"
    restart: always
    networks:
      - internal-net
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  letsencrypt:
    driver: local
  grafana_data:
    driver: local
  mongo_data:
    driver: local
networks:
  internal-net:
    driver: bridge
